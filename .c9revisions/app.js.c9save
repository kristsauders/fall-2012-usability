{"ts":1353708322535,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var express = require('express'),\n    app = express()\n    util  = require('util'),\n    exec = require('child_process').exec,\n    rest = require('restler'),\n    nodemailer = require('nodemailer'),\n    config = require('./config.js'),\n    callback = '';\n    \napp.use(express.static(__dirname + '/public'));\napp.use(express.bodyParser());\n\n//CORS middleware for anyone accessing my resume/API with cross-domain Javascript\nvar allowCrossDomain = function(req, res, next) {\n    //console.log(req.headers);\n    if(req.headers.origin) {\n        res.header('Access-Control-Allow-Origin', req.headers.origin);\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        res.header('Access-Control-Max-Age', '600');\n    }\n    next();\n}\n\napp.use(allowCrossDomain);\n\n// Function for sending an e-mail using my Gmail address\nfunction sendMail(address, subject, text) {\n    //General send e-mail\n    // create reusable transport method (opens pool of SMTP connections)\n    var smtpTransport = nodemailer.createTransport(\"SMTP\",{\n        service: \"Gmail\",\n        auth: {\n            user: config.email.username,\n            pass: config.email.password\n        }\n    });\n    // setup e-mail data with unicode symbols\n    var mailOptions = {\n        from: \"Krists Auders <kristsauders@gmail.com>\", // sender address\n        to: address, // destination address\n        subject: subject, // Subject line\n        text: text, // plaintext body\n    }\n    // send mail with defined transport object\n    smtpTransport.sendMail(mailOptions, function(error, response){\n        if(error){\n            console.log(error);\n        }else{\n            console.log(\"Message sent: \" + response.message);\n        }\n    \n        // Shut down the connection pool, since this doesn't happen often enough to keep it open\n        smtpTransport.close();\n    });\n}\n\n// Path to post to for sending an e-mail message, should probably be more secure than this..\napp.post('/email', function(req, res) {\n    sendMail(req.body.address, req.body.subject, req.body.text);\n    res.send(200);\n});\n\n// This is for receiving callbacks from AT&T when an SMS message arrives\n// in order to respond to an API Call contact from the resume\napp.all('/callback', function(req, res) {\n    console.log('Received SMS on ' + req.body.DateTime + ' from ' + req.body.SenderAddress);\n    console.log(req.body.Message);\n    res.send(200);\n    console.log('Posting API response to ' + callback);\n    rest.postJson(callback, {\n                \"message\": req.body.Message,\n                \"name\": \"Krists Auders\",\n                \"callback\": \"http://kristsauders.com/messages\"\n        }).on('complete', function(data) {\n            console.log(data);\n    });\n});\n\n// This is the endpoint for contacting me via API Call\napp.post('/messages', function(req, res) {\n    callback = req.body.callback;\n    rest.post('https://api.att.com/rest/sms/2/messaging/outbox', {\n            data: {\n                \"Address\": \"tel:8588228604\",\n                \"Message\": req.body.name + \": \" + req.body.message\n            },\n            headers: {\n                \"Authorization\": \"BEARER 441b6a6c38a433eb5f3a40e66f8874b0\"\n            }\n        }).on('complete', function(data) {\n            console.log(data);\n    });\n    \n    res.send('\\n\\n\\n\\\n-----------------------------------------\\n\\\nThank you for your message, ' + req.body.name + '! \\n\\\nI will reply with an HTTP POST to your callback URL: ' + req.body.callback + '\\n\\\n-----------------------------------------\\\n\\n\\n\\n');\n});\n\n// Listen only from localhost, since this will be routed through a local Nginx proxy\napp.listen(8084, '127.0.0.1');\n\n// Rebuild PDF version of resume periodically\nsetInterval(function() {\n    var date = new Date();\n    console.log('Rebuilding PDF resume on ' + date.toLocaleString());\n    exec('xvfb-run --server-args=\"-screen 0, 1280x1024x24\" ' + __dirname + '/wkhtmltopdf --use-xserver http://kristsauders.com/resume/resume.html ' + __dirname + '/Krists_Auders_Resume.pdf', function(error, stdout, stderr) {\n        if (error !== null) {\n          console.log('exec error: ' + error);\n        }\n    });\n}, 600000);\n\nconsole.log('Started up successfully.');\n"]],"start1":0,"start2":0,"length1":0,"length2":4239}]],"length":4239}
{"contributors":[],"silentsave":false,"ts":1353708574421,"patch":[[{"diffs":[[0,"    "],[-1,"exec = require('child_process').exec,\n    rest = require('restler'),\n    nodemailer = require('nodemailer'),\n    config = require('./config.js'),\n    callback = '';\n    \napp.use(express.static(__dirname + '/public'));\napp.use(express.bodyParser());\n\n//CORS middleware for anyone accessing my resume/API with cross-domain Javascript\nvar allowCrossDomain = function(req, res, next) {\n    //console.log(req.headers);\n    if(req.headers.origin) {\n        res.header('Access-Control-Allow-Origin', req.headers.origin);\n        res.header('Access-Control-Allow-Origin', '*');\n        res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n        res.header('Access-Control-Max-Age', '600');\n    }\n    next();\n}\n\napp.use(allowCrossDomain);\n\n// Function for sending an e-mail using my Gmail address\nfunction sendMail(address, subject, text) {\n    //General send e-mail\n    // create reusable transport method (opens pool of SMTP connections)\n    var smtpTransport = nodemailer.createTransport(\"SMTP\",{\n        service: \"Gmail\",\n        auth: {\n            user: config.email.username,\n            pass: config.email.password\n        }\n    });\n    // setup e-mail data with unicode symbols\n    var mailOptions = {\n        from: \"Krists Auders <kristsauders@gmail.com>\", // sender address\n        to: address, // destination address\n        subject: subject, // Subject line\n        text: text, // plaintext body\n    }\n    // send mail with defined transport object\n    smtpTransport.sendMail(mailOptions, function(error, response){\n        if(error){\n            console.log(error);\n        }else{\n            console.log(\"Message sent: \" + response.message);\n        }\n    \n        // Shut down the connection pool, since this doesn't happen often enough to keep it open\n        smtpTransport.close();\n    });\n}\n\n// Path to post to for sending an e-mail message, should probably be more secure than this..\napp.post('/email', function(req, res) {\n    sendMail(req.body.address, req.body.subject, req.body.text);\n    res.send(200);\n});\n\n// This is for receiving callbacks from AT&T when an SMS message arrives\n// in order to respond to an API Call contact from the resume\napp.all('/callback', function(req, res) {\n    console.log('Received SMS on ' + req.body.DateTime + ' from ' + req.body.SenderAddress);\n    console.log(req.body.Message);\n    res.send(200);\n    console.log('Posting API response to ' + callback);\n    rest.postJson(callback, {\n                \"message\": req.body.Message,\n                \"name\": \"Krists Auders\",\n                \"callback\": \"http://kristsauders.com/messages\"\n        }).on('complete', function(data) {\n            console.log(data);\n    });\n});\n\n// This is the endpoint for contacting me via API Call\napp.post('/messages', function(req, res) {\n    callback = req.body.callback;\n    rest.post('https://api.att.com/rest/sms/2/messaging/outbox', {\n            data: {\n                \"Address\": \"tel:8588228604\",\n                \"Message\": req.body.name + \": \" + req.body.message\n            },\n            headers: {\n                \"Authorization\": \"BEARER 441b6a6c38a433eb5f3a40e66f8874b0\"\n            }\n        }).on('complete', function(data) {\n            console.log(data);\n    });\n    \n    res.send('\\n\\n\\n\\\n-----------------------------------------\\n\\\nThank you for your message, ' + req.body.name + '! \\n\\\nI will reply with an HTTP POST to your callback URL: ' + req.body.callback + '\\n\\\n-----------------------------------------\\\n\\n\\n\\n');\n});\n\n// Listen only from localhost, since this will be routed through a local Nginx proxy\napp.listen(8084, '127.0.0.1');\n\n// Rebuild PDF version of resume periodically\nsetInterval(function() {\n    var date = new Date();\n    console.log('Rebuilding PDF resume on ' + date.toLocaleString());\n    exec('xvfb-run --server-args=\"-screen 0, 1280x1024x24\" ' + __dirname + '/wkhtmltopdf --use-xserver http://kristsauders.com/resume/resume.html ' + __dirname + '/Krists_Auders_Resume.pdf', function(error, stdout, stderr) {\n        if (error !== null) {\n          console.log('exec error: ' + error);\n        }\n    });\n}, 600000"],[1,"rest = require('restler');\n    \napp.use(express.static(__dirname + '/public'));\napp.use(express.bodyParser());\n\napp.post('/messages', function(req, res) {\n    callback = req.body.callback;\n    rest.post('https://api.att.com/rest/sms/2/messaging/outbox', {\n            data: {\n                \"Address\": \"tel:8588228604\",\n                \"Message\": req.body.name + \": \" + req.body.message\n            },\n            headers: {\n                \"Authorization\": \"BEARER 441b6a6c38a433eb5f3a40e66f8874b0\"\n            }\n        }).on('complete', function(data) {\n            console.log(data);\n    });\n    \n    res.send('');\n});\n\n// Listen only from localhost, since this will be routed through a local Nginx proxy\napp.listen(8084, '127.0.0.1'"],[0,");\n\n"]],"start1":83,"start2":83,"length1":4115,"length2":746}]],"length":870,"saved":false}
{"ts":1353709406828,"patch":[[{"diffs":[[0,"8084"],[-1,", '127.0.0.1'"],[0,");\n\n"]],"start1":808,"start2":808,"length1":21,"length2":8}]],"length":857,"saved":false}
{"ts":1353711260712,"patch":[[{"diffs":[[0,"t('/"],[-1,"messages"],[1,"textMe"],[0,"', f"]],"start1":206,"start2":206,"length1":16,"length2":14},{"diffs":[[0,") {\n"],[-1,"    callback = req.body.callback;\n"],[0,"    "]],"start1":236,"start2":236,"length1":42,"length2":8},{"diffs":[[0,"    "],[-1,"});\n"],[0,"    "],[-1,"\n"],[0,"    "]],"start1":640,"start2":640,"length1":17,"length2":12},{"diffs":[[0,"end("],[-1,"''"],[1,"200);\n    }"],[0,");\n}"]],"start1":657,"start2":657,"length1":10,"length2":19}]],"length":825,"saved":false}
{"ts":1353711746146,"patch":[[{"diffs":[[0,"estler')"],[1,"\n    access_token = null"],[0,";\n    \na"]],"start1":104,"start2":104,"length1":16,"length2":40},{"diffs":[[0,");\n});\n\n"],[1,"rest.post('https://api.att.com/oauth/token', {\n    data: {\n        \"Client_Id\": \"\",\n        \"client_secret\": \"\",\n        \"scope\": \"SMS,SPEECH,PAYMENT\",\n        \"grant_type\": \"client_credentials\"\n    }\n}).on('complete', function(data) {\n    console.log(data);\n    access_token = data.access_token;\n});\n\n"],[0,"// Liste"]],"start1":696,"start2":696,"length1":16,"length2":318}]],"length":1151,"saved":false}
{"contributors":[],"silentsave":false,"ts":1353711782908,"patch":[[{"diffs":[[0,"   \""],[-1,"C"],[1,"c"],[0,"lient_"],[-1,"I"],[1,"i"],[0,"d\": "]],"start1":768,"start2":768,"length1":16,"length2":16}]],"length":1151,"saved":false}
{"ts":1353711905194,"patch":[[{"diffs":[[0,"lient_id\": \""],[1,"42d5fa46a2b4df9376e3eb68996d5b8b"],[0,"\",\n        \""]],"start1":773,"start2":773,"length1":24,"length2":56},{"diffs":[[0,"cret\": \""],[1,"75a316ff9b55681b"],[0,"\",\n     "]],"start1":838,"start2":838,"length1":16,"length2":32}]],"length":1199,"saved":false}
{"ts":1353711923967,"patch":[[{"diffs":[[0,"RER "],[-1,"441b6a6c38a433eb5f3a40e66f8874b0\""],[1,"\" + access_token"],[0,"\n   "]],"start1":538,"start2":538,"length1":41,"length2":24}]],"length":1182,"saved":false}
{"ts":1353712107118,"patch":[[{"diffs":[[0,");\n});\n\n"],[1,"app.post('/getText', function(req, res) {\n    rest.post('https://api.att.com/rest/1/MyMessages', {\n            data: {\n                Addresses: 'tel:' + req.body.number.replace(/-/g, \"\").replace(/ /g, \"\").replace(\"tel:\", \"\").replace(\"(\",\"\").replace(\")\",\"\"),\n                Text: 'This is from my number',\n                Subject: '',\n                Group: false\n            },\n            headers: {\n                \"Authorization\": \"BEARER token here\"\n            }\n        }).on('complete', function(data) {\n            console.log(data);\n            res.send(200);\n    });\n});\n\n"],[0,"rest.pos"]],"start1":679,"start2":679,"length1":16,"length2":601}]],"length":1767,"saved":false}
{"ts":1353712125175,"patch":[[{"diffs":[[0,",PAYMENT"],[1,",CMS"],[0,"\",\n     "]],"start1":1461,"start2":1461,"length1":16,"length2":20}]],"length":1771,"saved":false}
{"ts":1353712153118,"patch":[[{"diffs":[[0,"AYMENT,C"],[-1,"M"],[1,"C"],[0,"S\",\n    "]],"start1":1463,"start2":1463,"length1":17,"length2":17}]],"length":1771,"saved":false}
{"ts":1353712258897,"patch":[[{"diffs":[[0,"RER "],[-1,"token here"],[1,"c0f1db35f658ad2c70496ded98990779"],[0,"\"\n  "]],"start1":1128,"start2":1128,"length1":18,"length2":40}]],"length":1793,"saved":false}
{"ts":1353712307810,"patch":[[{"diffs":[[0,"t: '"],[-1,"This is from my number"],[1,"Hello, you are receiving this from my personal number. You can reply to this message to contact me (task 4)."],[0,"',\n "]],"start1":966,"start2":966,"length1":30,"length2":116}]],"length":1879,"saved":false}
{"ts":1353712427638,"patch":[[{"diffs":[[0,");\n});\n\n"],[1,"app.post('/locateMe', function(req, res) {\n    rest.get('https://api.att.com/2/devices/location?requestedAccuracy=10000&acceptableAccuracy=10000&Tolerance=DelayTolerant', {\n            headers: {\n                \"Authorization\": \"BEARER c0f1db35f658ad2c70496ded98990779\"\n            }\n        }).on('complete', function(data) {\n            console.log(data);\n            res.send(data);\n    });\n});\n\n"],[0,"rest.pos"]],"start1":1372,"start2":1372,"length1":16,"length2":416}]],"length":2279,"saved":false}
{"ts":1353712588764,"patch":[[{"diffs":[[0,");\n});\n\napp."],[-1,"pos"],[1,"ge"],[0,"t('/locateMe"]],"start1":1372,"start2":1372,"length1":27,"length2":26}]],"length":2278,"saved":false}
